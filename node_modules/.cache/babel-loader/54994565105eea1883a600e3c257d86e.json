{"ast":null,"code":"var _jsxFileName = \"/Users/clarekinery/Desktop/corona_app/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data,\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }; //console.log(dailyData);\n\n\n    fetchAPI();\n  });\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: \"red\",\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }\n  }) : null;\n  const barChar = data.confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)']\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/clarekinery/Desktop/corona_app/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","confirmed","label","borderColor","fill","backgroundColor","barChar","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAAQC,IAAR,EAAcC,GAAd,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAqB;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMU,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,CAAC,MAAMR,cAAc,EAArB,CAAZ;AACH,KAFD,CADW,CAKX;;;AACAS,IAAAA,QAAQ;AACX,GAPQ,CAAT;AASA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBACG,oBAAC,IAAD;AACC,IAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAYA,IAA1B,CADN;AAEFC,MAAAA,QAAQ,EAAC,CAAC;AACNV,QAAAA,IAAI,EAAEE,SAAS,CAACM,GAAV,CAAc,CAAC;AAACG,UAAAA;AAAD,SAAD,KAAgBA,SAA9B,CADA;AAENC,QAAAA,KAAK,EAAE,UAFD;AAGNC,QAAAA,WAAW,EAAE,SAHP;AAINC,QAAAA,IAAI,EAAE;AAJA,OAAD,EAKN;AACCd,QAAAA,IAAI,EAAEE,SAAS,CAACM,GAAV,CAAc,CAAC;AAACG,UAAAA;AAAD,SAAD,KAAgBA,SAA9B,CADP;AAECC,QAAAA,KAAK,EAAE,UAFR;AAGCC,QAAAA,WAAW,EAAE,KAHd;AAICE,QAAAA,eAAe,EAAE,sBAJlB;AAKCD,QAAAA,IAAI,EAAE;AALP,OALM;AAFP,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAiBM,IAlBV;AAqBA,QAAME,OAAO,GACThB,IAAI,CAACW,SAAL,gBAEI,oBAAC,GAAD;AACC,IAAA,IAAI,EAAE;AACFJ,MAAAA,MAAM,EAAC,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADL;AAEFG,MAAAA,QAAQ,EAAC,CAAC;AACNE,QAAAA,KAAK,EAAC,QADA;AAENG,QAAAA,eAAe,EAAC,CAAC,sBAAD,EAAyB,sBAAzB,EAAiD,sBAAjD;AAFV,OAAD;AAFP,KADP;AASA,IAAA,OAAO,EAAE;AACLE,MAAAA,MAAM,EAAC;AAACC,QAAAA,OAAO,EAAC;AAAT,OADF;AAELC,MAAAA,KAAK,EAAC;AAACD,QAAAA,OAAO,EAAC,IAAT;AAAeE,QAAAA,IAAI,EAAG,oBAAmBnB,OAAQ;AAAjD;AAFD,KATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,GAgBI,IAjBR;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACuB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,SADL,CADJ;AAKH,CA1DD;;AA4DA,eAAeN,KAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { fetchDailyData } from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({data, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(()=> {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        //console.log(dailyData);\n        fetchAPI();\n    });\n    \n    const lineChart = (\n        dailyData.length \n        ? (<Line\n            data={{\n                labels: dailyData.map(({date}) => date),\n                datasets:[{\n                    data: dailyData.map(({confirmed})=> confirmed),\n                    label: 'Infected',\n                    borderColor: \"#3333ff\",\n                    fill: true,\n                }, {\n                    data: dailyData.map(({confirmed})=> confirmed),\n                    label: 'Infected',\n                    borderColor: \"red\",\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true,\n                }],\n            }}\n        />) : null\n    );\n\n    const barChar = (\n        data.confirmed\n        ? (\n            <Bar\n             data={{\n                 labels:['Infected', 'Recovered', 'Deaths'],\n                 datasets:[{\n                     label:'People',\n                     backgroundColor:['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)']\n                 }]\n\n            } }\n            options={{\n                legend:{display:false},\n                title:{display:true, text: `Current state in ${country}`},\n            }}\n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}