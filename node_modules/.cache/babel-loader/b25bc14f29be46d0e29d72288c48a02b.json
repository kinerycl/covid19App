{"ast":null,"code":"import _regeneratorRuntime from\"/Users/clarekinery/Desktop/covid19App.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/clarekinery/Desktop/covid19App.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/clarekinery/Desktop/covid19App.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{fetchDailyData}from'../../api';import{Line,Bar}from'react-chartjs-2';import styles from'./Chart.module.css';var Chart=function Chart(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchAPI(){return _ref2.apply(this,arguments);};}();//console.log(dailyData);\nfetchAPI();},[]);var lineChart=dailyData.length?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return date;}),datasets:[{data:dailyData.map(function(_ref4){var confirmed=_ref4.confirmed;return confirmed;}),label:'Infected',borderColor:\"#3333ff\",fill:true},{data:dailyData.map(function(_ref5){var confirmed=_ref5.confirmed;return confirmed;}),label:'Infected',borderColor:\"red\",backgroundColor:'rgba(255, 0, 0, 0.5)',fill:true}]}}):null;var barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)','rgba(255, 0, 0, 0.5)'],data:[confirmed.value,recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current state in \".concat(country)}}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:styles.container},country?barChart:lineChart);};export default Chart;","map":{"version":3,"sources":["/Users/clarekinery/Desktop/covid19App.github.io/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","value","legend","display","title","text","container"],"mappings":"+eAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,OAAQC,IAAR,CAAcC,GAAd,KAAwB,iBAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAoD,oBAAlDC,IAAkD,CAA5CC,SAA4C,WAA5CA,SAA4C,CAAjCC,SAAiC,WAAjCA,SAAiC,CAAtBC,MAAsB,WAAtBA,MAAsB,CAAbC,OAAa,MAAbA,OAAa,eAC5BX,QAAQ,CAAC,EAAD,CADoB,wCACvDY,SADuD,eAC5CC,YAD4C,eAG9DZ,SAAS,CAAC,UAAK,CACX,GAAMa,CAAAA,QAAQ,2FAAG,+IACbD,YADa,uBACMX,CAAAA,cAAc,EADpB,qHAAH,kBAARY,CAAAA,QAAQ,2CAAd,CAIA;AACAA,QAAQ,GACX,CAPQ,CAON,EAPM,CAAT,CASA,GAAMC,CAAAA,SAAS,CACXH,SAAS,CAACI,MAAV,cACG,oBAAC,IAAD,EACC,IAAI,CAAE,CACFC,MAAM,CAAEL,SAAS,CAACM,GAAV,CAAc,mBAAEC,CAAAA,IAAF,OAAEA,IAAF,OAAYA,CAAAA,IAAZ,EAAd,CADN,CAEFC,QAAQ,CAAC,CAAC,CACNb,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAEV,CAAAA,SAAF,OAAEA,SAAF,OAAgBA,CAAAA,SAAhB,EAAd,CADA,CAENa,KAAK,CAAE,UAFD,CAGNC,WAAW,CAAE,SAHP,CAINC,IAAI,CAAE,IAJA,CAAD,CAKN,CACChB,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAEV,CAAAA,SAAF,OAAEA,SAAF,OAAgBA,CAAAA,SAAhB,EAAd,CADP,CAECa,KAAK,CAAE,UAFR,CAGCC,WAAW,CAAE,KAHd,CAICE,eAAe,CAAE,sBAJlB,CAKCD,IAAI,CAAE,IALP,CALM,CAFP,CADP,EADH,CAiBM,IAlBV,CAqBA,GAAME,CAAAA,QAAQ,CACVjB,SAAS,cAEL,oBAAC,GAAD,EACC,IAAI,CAAE,CACFS,MAAM,CAAC,CAAC,UAAD,CAAa,WAAb,CAA0B,QAA1B,CADL,CAEFG,QAAQ,CAAC,CAAC,CACPC,KAAK,CAAC,QADC,CAEPG,eAAe,CAAC,CAAC,sBAAD,CAAyB,sBAAzB,CAAiD,sBAAjD,CAFT,CAGPjB,IAAI,CAAC,CAACC,SAAS,CAACkB,KAAX,CAAkBjB,SAAS,CAACiB,KAA5B,CAAmChB,MAAM,CAACgB,KAA1C,CAHE,CAAD,CAFP,CADP,CAUA,OAAO,CAAE,CACLC,MAAM,CAAC,CAACC,OAAO,CAAC,KAAT,CADF,CAELC,KAAK,CAAC,CAACD,OAAO,CAAC,IAAT,CAAeE,IAAI,4BAAsBnB,OAAtB,CAAnB,CAFD,CAVT,EAFK,CAiBL,IAlBR,CAqBA,mBACI,2BAAK,SAAS,CAAEN,MAAM,CAAC0B,SAAvB,EACKpB,OAAO,CAAEc,QAAF,CAAaV,SADzB,CADJ,CAKH,CA3DD,CA6DA,cAAeT,CAAAA,KAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { fetchDailyData } from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(()=> {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        //console.log(dailyData);\n        fetchAPI();\n    }, []);\n    \n    const lineChart = (\n        dailyData.length \n        ? (<Line\n            data={{\n                labels: dailyData.map(({date}) => date),\n                datasets:[{\n                    data: dailyData.map(({confirmed})=> confirmed),\n                    label: 'Infected',\n                    borderColor: \"#3333ff\",\n                    fill: true,\n                }, {\n                    data: dailyData.map(({confirmed})=> confirmed),\n                    label: 'Infected',\n                    borderColor: \"red\",\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true,\n                }],\n            }}\n        />) : null\n    );\n\n    const barChart = (\n        confirmed\n        ? (\n            <Bar\n             data={{\n                 labels:['Infected', 'Recovered', 'Deaths'],\n                 datasets:[{\n                    label:'People',\n                    backgroundColor:['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                    data:[confirmed.value, recovered.value, deaths.value]\n                 }]\n\n            } }\n            options={{\n                legend:{display:false},\n                title:{display:true, text: `Current state in ${country}`},\n            }}\n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}